// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc_tpl.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcTplServiceClient is the client API for GrpcTplService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcTplServiceClient interface {
	// Post方法
	Post(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (*PostRsp, error)
	// Get方法
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error)
}

type grpcTplServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcTplServiceClient(cc grpc.ClientConnInterface) GrpcTplServiceClient {
	return &grpcTplServiceClient{cc}
}

func (c *grpcTplServiceClient) Post(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (*PostRsp, error) {
	out := new(PostRsp)
	err := c.cc.Invoke(ctx, "/pb.GrpcTplService/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcTplServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/pb.GrpcTplService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcTplServiceServer is the server API for GrpcTplService service.
// All implementations must embed UnimplementedGrpcTplServiceServer
// for forward compatibility
type GrpcTplServiceServer interface {
	// Post方法
	Post(context.Context, *PostReq) (*PostRsp, error)
	// Get方法
	Get(context.Context, *GetReq) (*GetRsp, error)
	mustEmbedUnimplementedGrpcTplServiceServer()
}

// UnimplementedGrpcTplServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcTplServiceServer struct {
}

func (UnimplementedGrpcTplServiceServer) Post(context.Context, *PostReq) (*PostRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedGrpcTplServiceServer) Get(context.Context, *GetReq) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGrpcTplServiceServer) mustEmbedUnimplementedGrpcTplServiceServer() {}

// UnsafeGrpcTplServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcTplServiceServer will
// result in compilation errors.
type UnsafeGrpcTplServiceServer interface {
	mustEmbedUnimplementedGrpcTplServiceServer()
}

func RegisterGrpcTplServiceServer(s grpc.ServiceRegistrar, srv GrpcTplServiceServer) {
	s.RegisterService(&GrpcTplService_ServiceDesc, srv)
}

func _GrpcTplService_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcTplServiceServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GrpcTplService/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcTplServiceServer).Post(ctx, req.(*PostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcTplService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcTplServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GrpcTplService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcTplServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcTplService_ServiceDesc is the grpc.ServiceDesc for GrpcTplService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcTplService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GrpcTplService",
	HandlerType: (*GrpcTplServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _GrpcTplService_Post_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GrpcTplService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_tpl.proto",
}
